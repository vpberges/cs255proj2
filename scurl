#!/usr/bin/env python
'''
CS 255, Winter 2017
Project 2: scurl

Group:
    Jon Deaton, jdeaton@stanford.edu
    Vincent-Pierre Berges, vpberges@stanford.edu
'''

import os
import sys
import OpenSSL
import socket
from urlparse import urlparse
import argparse


class SecureCurl(object):
    # This class implements the functionality of

    def __init__(self, method, ciphers=None, crlfile=None, pk_file=None,
                 certificate=None, allow_stale_certs=False):

        self.default_port = 443 # Default port for HTTPS requests
        self.packet_end = "\r\n0\r\n\r\n" # Something specifying the end of the packet
        self.timeout = 1 # socket.rev() timeout in seconds
        self.buffer_size = 1024 # Buffer size for packet recieving in bytes

        # Set instance vairables based on those from construction
        self.ciphers = ciphers
        self.method = method
        self.crlfile = crlfile
        self.certificate = certificate
        self.pk_file = pk_file
        self.allow_stale_certs = allow_stale_certs

    def make_context(self):
        # Initialize the context
        context = OpenSSL.SSL.Context(self.method)

        # Set the ciphers if necessary
        if self.ciphers is not None:
            context.set_cipher_list(self.ciphers)

        context.set_timeout(self.timeout)
        context.set_verify(OpenSSL.SSL.VERIFY_NONE, verify)

        # Set the Pem file if necessary
        if self.pk_file is not None:
            context.use_privatekey_file(self.pk_file)

        return context

    def curl_urls(self, urls):
        # Decide on which SSL protocol to use

        # Get the context
        self.context = self.make_context()

        for url in urls:
            # Make a connection using the specified url
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            connection = OpenSSL.SSL.Connection(self.context, sock)

            try:
                connection.connect((url, self.default_port))
            except:
                sys.stderr.write("Could not connect.\n")
                exit(1)

            # Do the connection handshake
            connection.do_handshake()

            # Make a HTTP request
            request = format_http_request(url)
            connection.send(request)

            # Listen to the socket
            try:
                while True:
                    packet = connection.recv(self.buffer_size)
                    sys.stdout.write(packet)
                    sys.stdout.flush()

                    if packet.endswith(self.packet_end):
                         break

            except OpenSSL.SSL.Error:
                print 'Connection died unexpectedly'
                continue

            connection.shutdown()
            connection.close()

def get_SSL_method(args):
    # This function is for getting the SSL method
    # based on the command line arguments

    if args.tlsv1_0:
        return OpenSSL.SSL.TLSv1_METHOD
    elif args.tlsv1_1:
        return OpenSSL.SSL.TLSv1_1_METHOD
    elif args.tlsv1_2:
        return OpenSSL.SSL.TLSv1_2_METHOD
    elif args.sslv3:
        return OpenSSL.SSL.SSLv3_METHOD
    else:
        # Default to TLS 1.2
        return OpenSSL.SSL.TLSv1_2_METHOD

def verify(conn, cert, errnum, depth, ok):
    # This obviously has to be updated
    print 'Got certificate: %s' % cert.get_subject()
    return ok

def format_http_request(url):
    # This is how to format an HTTP request
    request  = "GET / HTTP/1.1\r\n" \
                  "Host: %s\r\n"\
                  "User-Agent: curl/7.52.1\n\r" \
                  "Accept: */*\r\n\r\n" % url
    return request

def scurl(args):

    # Get the specified version of TLS to use
    method = get_SSL_method(args)

    # Instantiate a secure curler
    secure_curler = SecureCurl(method,
                               ciphers=args.ciphers,
                               crlfile=args.crlfile,
                               pk_file=args.pinnedcertificate,
                               certificate=args.cacert,
                               allow_stale_certs=args.allow_stale_certs)

    # curl all the URLS
    secure_curler.curl_urls(args.urls)

def main():
    # Command Line Argument parsing
    description = "CS255: scurl - transfer a URL"
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("urls", nargs="+", help="List of URLs to make requests from")

    version_group = parser.add_argument_group("Versions")
    version_group.add_argument("--tlsv1.0", dest="tlsv1_0", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.0 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.1", dest="tlsv1_1", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.1 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.2,", dest="tlsv1_2", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.2 when connecting to a remote TLS server.")

    version_group.add_argument("-3", "--sslv3", dest="sslv3", action="store_true",
                               help="(SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server.")

    parser.add_argument("--ciphers", nargs=1, help="(TLS) Specify which ciphers to use in the connection with a colon-separated list.")

    parser.add_argument("--crlfile", nargs=1, help="(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.")

    parser.add_argument("--cacert", nargs=1, help="(TLS) Tells curl to use the specified certificate file to verify the peer.")

    parser.add_argument("--allow-stale-certs", type=int, nargs=1, dest="allow_stale_certs", help="Accept a certificate C as valid if (a) C is an otherwise valid certificate that has expired and (b) C expired within the past N days.")

    parser.add_argument("--pinnedcertificate", nargs=1, help="Provide a public-key file in PEM format.")

    args = parser.parse_args()

    # Pass off arguments to be curl'd
    scurl(args)

if __name__ == '__main__':
    main()