#!/usr/bin/env python

import OpenSSL
import socket
import urlparse
import os
import sys

import argparse

def try_socket():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # s.bind(('',80))  ?

    s.connect(("stackoverflow.com" , 80))
    # s.sendall("GET /\r\n")
    s.send('GET / HTTP/1.1\nHost: stackoverflow.com\n\n')
    print s.recv(256)
    s.close



def main():
    # Argument parsing
    description = "CS255: scurl - transfer a URL"
    parser = argparse.ArgumentParser(description=description)

    version_group = parser.add_argument_group("Versions")
    version_group.add_argument("--tlsv1.0", dest="tlsv1_0", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.0 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.1", dest="tlsv1_1", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.1 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.2,", dest="tlsv1_2", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.2 when connecting to a remote TLS server.")

    version_group.add_argument("-3", "--sslv3", dest="sslv3", action="store_true",
                               help="(SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server.")

    parser.add_argument("--ciphers", help="(TLS) Specify which ciphers to use in the connection with a colon-separated list.")

    parser.add_argument("--crlfile", help="(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.")

    parser.add_argument("--cacert", help="(TLS) Tells curl to use the specified certificate file to verify the peer.")

    parser.add_argument("--allow-stale-certs", type=int, help="Accept a certificate C as valid if (a) C is an otherwise valid certificate that has expired and (b) C expired within the past N days.")

    parser.add_argument("--pinnedcertificate", help="Provide a public-key file in PEM format.")

    args = parser.parse_args()




    try_socket()



if __name__ == '__main__':
    main()