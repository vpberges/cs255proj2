#!/usr/bin/env python
'''
CS 255, Winter 2017
Project 2: scurl

Group:
    Jon Deaton, jdeaton@stanford.edu
    Vincent-Pierre Berges, vpberges@stanford.edu
'''

import os
import sys
import OpenSSL
import socket
from urlparse import urlparse
import argparse

def get_context(method, ciphers, pem_file):
    # Initialize the context
    context = OpenSSL.SSL.Context(method)

    # Set the ciphers if necessary
    if ciphers is not None:
        context.set_cipher_list(ciphers)

    context.set_verify(OpenSSL.SSL.VERIFY_NONE, verify)

    # Set the Pem file if necessary
    if pem_file is not None:
        context.use_privatekey_file(pem_file)

    return context

def get_SSL_method(args):
    # This function is for getting the SSL method
    # based on the command line arguments

    if args.tlsv1_0:
        return OpenSSL.SSL.TLSv1_METHOD
    elif args.tlsv1_1:
        return OpenSSL.SSL.TLSv1_1_METHOD
    elif args.tlsv1_2:
        return OpenSSL.SSL.TLSv1_2_METHOD
    elif args.sslv3:
        return OpenSSL.SSL.SSLv3_METHOD
    else:
        # Default to TLS 1.2
        return OpenSSL.SSL.TLSv1_2_METHOD

def verify(conn, cert, errnum, depth, ok):
    # This obviously has to be updated
    print 'Got certificate: %s' % cert.get_subject()
    return ok

def scurl(args):
    # Decide on which SSL protocol to use
    tls_method = get_SSL_method(args)
    print "TLS Version: %s" % tls_method

    # Get the context
    context = get_context(tls_method, args.ciphers, args.pinnedcertificate)

    for url in args.urls:
        # Make a connection using the specified url
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connection = OpenSSL.SSL.Connection(context, sock)

        try:
            connection.connect((url, 443))
        except:
            sys.stderr.write("Could not connect.\n")
            exit(1)

        # Do the connection handshake
        connection.do_handshake()

        # Make a request
        message = "GET / HTTP/1.1\r\n" \
                  "Host: %s\r\n"\
                  "User-Agent: curl/7.52.1\n\r" \
                  "Accept: */*\r\n\r\n" % url

        print "MESSAGE:\n%s" % message
        connection.send(message)

        content_end = "\r\n0\r\n\r\n"

        # Listen to the socket
        try:
            while True:
                packet = connection.recv(1024)
                sys.stdout.write(packet)
                sys.stdout.flush()

                if packet.endswith(content_end):
                    break

        except OpenSSL.SSL.Error:
            print 'Connection died unexpectedly'
            continue

        connection.shutdown()
        connection.close()

def main():
    # Command Line Argument parsing
    description = "CS255: scurl - transfer a URL"
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("urls", nargs="+", help="List of URLs to make requests from")

    version_group = parser.add_argument_group("Versions")
    version_group.add_argument("--tlsv1.0", dest="tlsv1_0", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.0 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.1", dest="tlsv1_1", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.1 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.2,", dest="tlsv1_2", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.2 when connecting to a remote TLS server.")

    version_group.add_argument("-3", "--sslv3", dest="sslv3", action="store_true",
                               help="(SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server.")

    parser.add_argument("--ciphers", nargs=1, help="(TLS) Specify which ciphers to use in the connection with a colon-separated list.")

    parser.add_argument("--crlfile", nargs=1, help="(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.")

    parser.add_argument("--cacert", nargs=1, help="(TLS) Tells curl to use the specified certificate file to verify the peer.")

    parser.add_argument("--allow-stale-certs", type=int, nargs=1, help="Accept a certificate C as valid if (a) C is an otherwise valid certificate that has expired and (b) C expired within the past N days.")

    parser.add_argument("--pinnedcertificate", nargs=1, help="Provide a public-key file in PEM format.")

    args = parser.parse_args()

    # Pass off arguments to be curl'd
    scurl(args)


if __name__ == '__main__':
    main()