#!/usr/bin/env python
'''
CS 255, Winter 2017
Project 2: scurl - Secure curl

This file contains our implementation of secure curl (scurl). In this implementation we made a class
called SecureCurl that implements the functionality of

Group:
    Jon Deaton, jdeaton@stanford.edu
    Vincent-Pierre Berges, vpberges@stanford.edu
'''

import os
import sys
import OpenSSL
import socket
import urlparse
import argparse
import datetime
import re

class SecureCurl(object):
    # This class implements the functionality of curl but with TLS

    def __init__(self, method, ciphers=None, crlfile=None, pinnedcertificate=None,
                 cacert=None, allow_stale_certs=False):

        # Instance Variables
        self.error = '' # Buffer containing a single line for errors
        self.default_port = 443 # Default port for HTTPS requests
        self.packet_end = b'\r\n\r\n' # End of HTTP content indication
        self.buffer_size = 2048 # Buffer size for packet receiving in bytes

        # Set instance variables to match those from constructor
        self.ciphers = ciphers # Ciphers passed in on the command line
        self.method = method # Protocol, e.g. OpenSSL.SSL.TLSv1_2_METHOD
        self.crlfile = crlfile # Certificate Revocation List (CRL) file
        self.cacert = cacert
        self.cacert_used = False
        self.pinnedcertificate = pinnedcertificate
        self.allow_stale_certs = allow_stale_certs

        self.verify_mode = OpenSSL.SSL.VERIFY_PEER

        # This will contain a lookup table of (capital) hex-encoded certificate serial numbers
        self.revocations = None

        # Set the Certificate Revocation list based on those passed in from the crlfile argument.
        self.set_CRL()

    def make_context(self):
        # This method is for creating a OpenSSL.SSL.Context object to use for the connection

        # Initialize the context
        context = OpenSSL.SSL.Context(self.method)

        # For SNI hostname verification
        context.check_hostname = True

        # Set the ciphers if necessary
        if self.ciphers is not None:
            context.set_cipher_list(self.ciphers)

        # Specify the CA Certificate to use for verification
        if self.cacert is not None:
            try:
                f = open(self.cacert, 'r')
                crt_buff = f.read()
                f.close()
            except:
                sys.stderr.write("Error reading CA certificate file: %s\n" % self.cacert)
                exit(1)

            # Use the certificate provided
            try:
                ca_crt = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, crt_buff)
            except:
                sys.stderr.write("Error loading CA certificate from: %s\n" % self.cacert)
                exit(1)

            # CA Certificate was loaded properly so specify that it should be used
            context.use_certificate(ca_crt)

        # Set the verify callback to be the verify method of this class
        try:
            context.set_verify(self.verify_mode, self.verify)
        except:
            sys.stderr.write("OpenSSL.SSL.Context creation failed: could not set verification callback.\n")
            exit(1)

        return context

    def set_CRL(self):
        # This method sets the Certificate Revocation List (CRL) if one was provided by the --crlfile argument
        # by loading the contents of the file pointed to by the crlfile attribute of this object into a buffer
        # and parsing it using the OpenSSL.crypto.load_crl function to parse the file which should be of PEM foramt
        # (specified by OpenSSL.crypto.FILETYPE_PEM). This method then sets the revocations attribute of this object
        # to be a lookup set of Hex-encoded serial numbers as strings representing the serial numbers on the CRL.

        if self.crlfile is not None:
            try:
                f = open(self.crlfile, 'r')
                crl_buff = f.read()
                f.close()
            except:
                sys.stderr.write("Error reading CRL file: %s\n" % self.crlfile)
                exit(1)

            # Load the buffer into an OpenSSL CRL object
            crl = OpenSSL.crypto.load_crl(OpenSSL.crypto.FILETYPE_PEM, crl_buff)

            # Create a lookup table for revocations. These are formatted as capital hex strings
            self.revocations = set(map(lambda x: x.get_serial(), crl.get_revoked()))

    def hostname_match(self, hostname, pattern):
        # This function is for checking to see if a hostname matches a pattern that may contains wildcards '*'

        if "*" in pattern:
            if hostname in pattern:
                return True
            h = hostname.replace(pattern.replace('*',''),'')
            if '.' in h:
                return False
            else:
                return True
        else:
            return hostname == pattern

    def verify(self, conn, cert, errnum, depth, ok):
        # This is the callback function used to verify each certificate in the certificate chain
        # from the connection established with peer.

        # If a CA certificate has been provided to match the root certificate, then check to make sure they match
        if self.cacert is not None and not self.cacert_used:

            # Load the CA Certificate file into a buffer
            try:
                f = open(self.cacert, 'r')
                crt_buff = f.read()
                f.close()
            except:
                sys.stderr.write("Could not read CA certificate file: %s\n" % self.cacert)
                exit(1)

            # Try parsing the certificate file
            try:
                ca_crt = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, crt_buff)
            except:
                sys.stderr.write("Error parsing CA certificate from: %s\n" % self.cacert)
                exit(1)

            # Try to see if 
            try:
                if ca_crt.get_issuer() == cert.get_issuer():
                    self.cacert_used = True

                if ca_crt.get_issuer()!= cert.get_issuer() and depth == 0:
                    self.error = 'The cacert provided does not appear in the chain of certificates'
                    return False
            except:
                sys.stderr.write("Error with CA certificate: %s\n" % self.cacert)
                exit(1)


        # Verify hostname match
        if depth == 0:
            hostname = conn.get_servername()
            pattern = cert.get_subject().commonName
            SAN = [pattern]
            authorityKeyIdentifier = ''
            subjectKeyIdentifier = ''
            for i in range(cert.get_extension_count()):
                if cert.get_extension(i).get_short_name() == 'authorityKeyIdentifier':
                    authorityKeyIdentifier = cert.get_extension(i).get_data()
                if cert.get_extension(i).get_short_name() == 'subjectKeyIdentifier':
                    subjectKeyIdentifier = cert.get_extension(i).get_data()
                if cert.get_extension(i).get_short_name() == 'subjectAltName':
                    SAN= ''.join(i  if ord(i) < 128 else '||||' for i in cert.get_extension(i).get_data())
                    SAN = SAN.split('||||')
                    SAN = [str(x[1:]) for x in SAN[1:]]
            if authorityKeyIdentifier == subjectKeyIdentifier:
                self.error = 'There is a self signed certificate'
                return False
            if not any([self.hostname_match(hostname, i) for i in SAN]):
                self.error = "Certificate verification failed: Hostname did not match"
                return False


        # If we want to allow stale certificates check the expiration date on the certificate
        if self.allow_stale_certs is not None:
            expire_date = datetime.datetime.strptime(cert.get_notAfter(), "%Y%m%d%H%M%SZ")
            expired_ago = datetime.datetime.now() - expire_date
            if expired_ago.days > self.allow_stale_certs:
                self.error = "Certificate Expired more than %d days ago." % self.allow_stale_certs
                return False

        elif cert.has_expired():
            if not ((self.pinnedcertificate is not None) and (depth == 0)):
                # Allow stale certificated was not specify so simply check to see if it's expired or not
                self.error = "Expired certificate."
                return False

        # Dealing with a pinned certificate
        if (self.pinnedcertificate is not None) and (depth == 0):

            try:
                f = open(self.pinnedcertificate, 'r')
                pinned_cert_buff = f.read()
                f.close()
            except:
                self.error = "Error reading pinned certificate file"
                return False

            # Check to make sure that the certificates match exactly by checking the SHA 256 hash
            pinned_cert = OpenSSL.crypto.load_certificate(OpenSSL.crypto.FILETYPE_PEM, pinned_cert_buff)
            pinned_cert_digest = pinned_cert.digest(b"sha256")
            server_cert_digest = cert.digest(b"sha256")

            if (pinned_cert_digest != server_cert_digest):
                # SHA-256 hashes did not match
                self.error = "Certificate verification failed: Mismatched SHA 256"
                return False

        # Check to see if it's on the CRL if we were provided a CRL file
        if self.revocations is not None:
            # Serial Numbers are encoded in capital hex in the PEM files so
            # we must format the certificate number as such to look it up
            # I haven't been able to test this yet
            serial_number = "%X" % cert.get_serial_number()
            if serial_number in self.revocations:
                self.error = "Serial number in CRL."
                return False

        return True

    def setup_connection(self, host, port):
        # This method is for creating a OpenSSL Connection instance with verification already performed
        # so that the connection is ready to make HTTP requests

        # Make a connection using the specified url
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        connection = OpenSSL.SSL.Connection(self.context, sock)

        # This specified the hostname to send as server name in client hello message for SNI implementation
        connection.set_tlsext_host_name(host)

        # Try to connect to the host
        try:
            connection.connect((host, port))
        except socket.gaierror:
            sys.stderr.write("scurl: (6) Could not resolve host: %s\n" % host)
            exit(1)
        except:
            try:
                sys.stderr.write("Could not establish connection with: %s:d\n" % (host, port))
                exit(1)
            except:
                sys.stderr.write("The hostname was not appropriate.\n")
                exit(1)

        # Do the connection (secret) handshake
        # This is where verification of connection certificate will be called
        try:
            connection.do_handshake()
        except OpenSSL.SSL.WantReadError:
            sys.stderr.write("Encountered WantReadError in handshake.\n")
            exit(1)
        except OpenSSL.SSL.Error:
            # Certificate verification failed
            if self.error == '':
                sys.stderr.write("Could not do handshake, METHOD not supported.\n")
            else : 
                sys.stderr.write("Could not do handshake, error in VERIFY : "+self.error+"\n")
            sys.stderr.flush()
            exit(1)

        return connection

    def curl_urls(self, urls):

        # Create the Context instance
        self.context = self.make_context()

        for url in urls:
            # Parse hostname and port from the url
            host, port, path = get_host_port(url)
            port = port if port is not None else self.default_port

            # Make connection and do handshake
            connection = self.setup_connection(host, port)

            # Make a HTTP request
            request = format_http_request(host, path)
            connection.send(request)

            body = ''
            # Now that the handshake and request have been completed
            # Receive chunks of data from the socket
            while True:
                try:
                    packet = connection.recv(self.buffer_size)
                except OpenSSL.SSL.ZeroReturnError:
                    # End of content
                    break
                    # pass
                except OpenSSL.SSL.WantReadError:
                    # Something happened
                    break
                    # pass
                except OpenSSL.SSL.SysCallError:
                    # End of file
                    break
                    # pass
                except OpenSSL.SSL.Error:

                    sys.stderr.write("Connection died unexpectedly.\n")
                    break

                # Make sure not to print out the packet end mark
                body += packet


            if '\r\n\r\n' in body:
                body = body[body.index('\r\n\r\n') + 4:]

            sys.stdout.write(body)
            sys.stdout.flush()



            connection.shutdown()
            connection.close()

def get_SSL_method(args):
    # This function is for getting the SSL method based on the command line arguments
    # The first argument is the argparse parsed arguments object
    if args.sslv3:
        return OpenSSL.SSL.SSLv3_METHOD
    elif args.tlsv1_2:
        return OpenSSL.SSL.TLSv1_2_METHOD
    elif args.tlsv1_1:
        return OpenSSL.SSL.TLSv1_1_METHOD
    elif args.tlsv1_0:
        return OpenSSL.SSL.TLSv1_METHOD
    else:
        # Default to TLS 1.2
        return OpenSSL.SSL.TLSv1_2_METHOD

def get_host_port(url):
    # This function parses the host, port, and path from a provided url
    # Return: a tuple of host, port, path where port is None if no port was provided

    parsed = urlparse.urlparse(url)

    # Get the host and port in format "host:port" from the parsed url object
    # which may either be in the netloc or path value
    host_port = parsed.netloc if parsed.netloc != '' else parsed.path

    # Separate and typecast the host and port
    if ":" in host_port:
        host, port = host_port.split(":")
        port = int(port)
    else:
        # Otherwise there was no port
        host, port = host_port, None

    # If the host and port were found in the path attribute, then use '' as the path
    path = '' if host_port == parsed.path else parsed.path

    return host, port, path

def format_http_request(host, path):
    # This function is for formatting an HTTP request with a given host and path name

    # If the path is empty we want it just to be '/'
    path = '/' if path == '' else path

    # Standard HTTP line delimiter and request end indicators
    line_delimeter = "\r\n"
    request_end = "\r\n\r\n"

    request_parts = ["GET {path} HTTP/1.0".format(path=path),
                     "Host: {host}".format(host=host),
                     "User-Agent: curl/7.53.1",
                     "Accept: */*"]

    # Format the request and return it
    request = line_delimeter.join(request_parts) + request_end
    return request

def scurl(args):
    # This function takes the

    # Get the specified version of TLS to use
    method = get_SSL_method(args)

    # Instantiate a secure curler
    secure_curler = SecureCurl(method,
                               ciphers=args.ciphers,
                               crlfile=args.crlfile,
                               pinnedcertificate=args.pinnedcertificate,
                               cacert=args.cacert,
                               allow_stale_certs=args.allow_stale_certs)

    # curl all the URLS
    secure_curler.curl_urls(args.urls)

def main():
    # Command Line Argument parsing
    description = "scurl - secure transfer a URL"
    parser = argparse.ArgumentParser(description=description)

    parser.add_argument("urls", nargs="+", help="List of URLs to make requests from")

    version_group = parser.add_argument_group("Versions")
    version_group.add_argument("--tlsv1.0", dest="tlsv1_0", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.0 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.1", dest="tlsv1_1", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.1 when connecting to a remote TLS server.")

    version_group.add_argument("--tlsv1.2,", dest="tlsv1_2", action="store_true",
                               help="(TLS) Forces curl to use TLS version 1.2 when connecting to a remote TLS server.")

    version_group.add_argument("-3", "--sslv3", dest="sslv3", action="store_true",
                               help="(SSL) Forces curl to use SSL version 3 when negotiating with a remote SSL server.")

    parser.add_argument("--ciphers", help="(TLS) Specify which ciphers to use in the connection with a colon-separated list.")

    parser.add_argument("--crlfile", help="(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.")

    parser.add_argument("--cacert", help="(TLS) Tells curl to use ONLY the specified certificate file to verify the peer. The file may contain only one CA certificate. The certificate must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file.")

    parser.add_argument("--allow-stale-certs", dest="allow_stale_certs", help="Accept a certificate C as valid if (a) C is an otherwise valid certificate that has expired and (b) C expired within the past N days.")

    parser.add_argument("--pinnedcertificate", help="Provide a public-key certificate file in PEM format. When a user passes this argument, the TLSl client will only send an application data to server if the server's TLS certificate is exactly the one contained in the specified file. This option will overrride everything else.")


    def in_case_of_parse_error(text):
        sys.stderr.write("Your query in invalid, use --help for assistance.\n")
        exit(1)

    parser.error = in_case_of_parse_error
    args = parser.parse_args()

    try:
        if args.allow_stale_certs is not None:
            args.allow_stale_certs = int(args.allow_stale_certs)
    except:
        parser.error("--allow-stale-certs must be non-negative integer.")

    # Make sure that a non-negative integer was passed to this argument
    if args.allow_stale_certs is not None and args.allow_stale_certs < 0:
        parser.error("--allow-stale-certs must be non-negative integer.")

    # Pass off arguments to be curl'd
    scurl(args)


if __name__ == '__main__':
    main()
